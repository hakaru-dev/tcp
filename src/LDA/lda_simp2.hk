fn topic_prior array(prob): 
 fn word_prior array(prob): 
  fn numDocs nat: 
   fn w array(nat): 
    fn doc array(nat): 
     fn z array(nat): 
      fn wordUpdate nat: 
       (match (wordUpdate < size(w)): 
         true: 
          weight((((product d from 0 to int2nat((nat2int(size(topic_prior))
                                                  - 
                                                 1)): 
                     betaFunc((summate dD2 from (d + 1) to size(topic_prior): 
                                topic_prior[dD2]),
                              topic_prior[d]))
                    ** 
                   (nat2real(numDocs) * (-1)))
                   * 
                  (product d from 0 to numDocs: 
                    (product i from 0 to int2nat((nat2int(size(topic_prior)) - 1)): 
                      betaFunc(((summate dD2 from (i + 1) to size(topic_prior): 
                                  topic_prior[dD2])
                                 + 
                                nat2prob((summate dD2 from 0 to size(w): 
                                           (match (not(((nat2int((match (dD2 == wordUpdate): 
                                                                   true: 0
                                                                   false: z[dD2]))
                                                          - 
                                                         1)
                                                         < 
                                                        nat2int(i))) && 
                                                   (d == doc[dD2])): 
                                             true: 1
                                             false: 0)))),
                               topic_prior[i])))),
                 xsL <~ plate d of numDocs: 
                         plate i of int2nat((nat2int(size(topic_prior)) - 1)): 
                          beta(((summate dD2 from (i + 1) to size(topic_prior): 
                                  topic_prior[dD2])
                                 + 
                                nat2prob((summate dD2 from 0 to size(w): 
                                           (match (not(((nat2int((match (dD2 == wordUpdate): 
                                                                   true: 0
                                                                   false: z[dD2]))
                                                          - 
                                                         1)
                                                         < 
                                                        nat2int(i))) && 
                                                   (d == doc[dD2])): 
                                             true: 1
                                             false: 0)))),
                               topic_prior[i])
                 weight(recip((product d from 0 to numDocs: 
                                ((summate dD2 from 0 to 1: (product j from 0 to dD2: xsL[d][j]))
                                  ** 
                                 nat2real((summate dD2 from 0 to size(w): 
                                            (match (d == doc[dD2]): 
                                              true: 1
                                              false: 0)))))),
                        xsJ <~ plate k of size(topic_prior): 
                                plate i of int2nat((nat2int(size(word_prior)) - 1)): 
                                 beta((summate x0 from (i + 1) to size(word_prior): word_prior[x0]),
                                      word_prior[i])
                        categorical(array zNewH of size(topic_prior): 
                                     real2prob((prob2real((product d from 0 to size(w): 
                                                            (product j from 0 to (match (d
                                                                                          == 
                                                                                         wordUpdate): 
                                                                                   true: zNewH
                                                                                   false: 0): 
                                                              xsL[doc[d]][((match (d
                                                                                    == 
                                                                                   wordUpdate): 
                                                                             true: 0
                                                                             false: z[d])
                                                                            + 
                                                                           j)])))
                                                 * 
                                                (product d from 0 to size(w): 
                                                  (match (((match (d == wordUpdate): 
                                                             true: zNewH
                                                             false: z[d])
                                                            + 
                                                           1)
                                                           == 
                                                          size(topic_prior)): 
                                                    true: 1
                                                    false: 
                                                     (1
                                                       + 
                                                      (prob2real(xsL[doc[d]][(match (d
                                                                                      == 
                                                                                     wordUpdate): 
                                                                               true: zNewH
                                                                               false: z[d])])
                                                        * 
                                                       (-1)))))
                                                 * 
                                                prob2real((product d from 0 to size(w): 
                                                            (product j from 0 to w[d]: 
                                                              xsJ[(match (d == wordUpdate): 
                                                                    true: zNewH
                                                                    false: z[d])][j])))
                                                 * 
                                                (product d from 0 to size(w): 
                                                  (match ((w[d] + 1) == size(word_prior)): 
                                                    true: 1
                                                    false: 
                                                     (1
                                                       + 
                                                      (prob2real(xsJ[(match (d == wordUpdate): 
                                                                       true: zNewH
                                                                       false: z[d])][w[d]])
                                                        * 
                                                       (-1)))))
                                                 / 
                                                (product d from 0 to size(w): 
                                                  (summate x0 from 0 to size(word_prior): 
                                                    (prob2real((product j from 0 to x0: 
                                                                 xsJ[(match (d == wordUpdate): 
                                                                       true: zNewH
                                                                       false: z[d])][j]))
                                                      * 
                                                     (match ((x0 + 1) == size(word_prior)): 
                                                       true: 1
                                                       false: 
                                                        (1
                                                          + 
                                                         (prob2real(xsJ[(match (d == wordUpdate): 
                                                                          true: zNewH
                                                                          false: z[d])][x0])
                                                           * 
                                                          (-1))))))))))))
         false: reject. measure(nat))
